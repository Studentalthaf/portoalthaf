name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE: halaman-app

jobs:
  # Deploy ke VPS Production
  deploy-production:
    name: Deploy to Production VPS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
          docker build -t ${{ env.DOCKER_IMAGE }}:latest .
          
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            # Navigate to deployment directory
            cd /opt/halaman
            
            # Pull latest code
            git fetch origin
            git reset --hard origin/main
            
            # Stop existing containers
            docker-compose down
            
            # Remove old images
            docker image prune -f
            
            # Build and start new containers
            docker-compose build --no-cache
            docker-compose up -d
            
            # Wait for health check
            sleep 30
            
            # Check if application is running
            if curl -f http://localhost/health > /dev/null 2>&1; then
              echo "✅ Deployment successful!"
            else
              echo "❌ Health check failed"
              exit 1
            fi
            
            # Cleanup old images
            docker image prune -f
            
      - name: Verify deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          
          # Check if application is accessible
          if curl -f https://${{ secrets.VPS_DOMAIN }}/health > /dev/null 2>&1; then
            echo "✅ Application is accessible!"
          else
            echo "❌ Application is not accessible"
            exit 1
          fi

  # Deploy ke VPS Staging (develop branch)
  deploy-staging:
    name: Deploy to Staging VPS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Build Docker image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }}:staging-${{ github.sha }} .
          docker build -t ${{ env.DOCKER_IMAGE }}:staging .
          
      - name: Deploy to Staging VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_STAGING_HOST }}
          username: ${{ secrets.VPS_STAGING_USERNAME }}
          key: ${{ secrets.VPS_STAGING_SSH_KEY }}
          port: ${{ secrets.VPS_STAGING_PORT }}
          script: |
            # Navigate to staging directory
            cd /opt/halaman-staging
            
            # Pull latest code
            git fetch origin
            git reset --hard origin/develop
            
            # Stop existing containers
            docker-compose down
            
            # Remove old images
            docker image prune -f
            
            # Build and start new containers
            docker-compose build --no-cache
            docker-compose up -d
            
            # Wait for health check
            sleep 30
            
            # Check if application is running
            if curl -f http://localhost/health > /dev/null 2>&1; then
              echo "✅ Staging deployment successful!"
            else
              echo "❌ Staging health check failed"
              exit 1
            fi

  # Notify deployment status
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          # Add notification logic (Slack, Discord, email, etc.)
          # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"✅ Deployment successful!"}' ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          # Add failure notification logic
          # Example: curl -X POST -H 'Content-type: application/json' --data '{"text":"❌ Deployment failed!"}' ${{ secrets.SLACK_WEBHOOK }}
